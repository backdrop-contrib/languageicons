<?php
/**
 * @file
 * Icons for language links.
 *
 * This is a spin off from the Internationalization (i18n) package.
 */

/**
 * Implements hook_theme().
 */
function languageicons_theme() {
  return array(
    'languageicons_icon' => array(
      'variables' => array('language' => NULL, 'title' => NULL),
    ),
    'languageicons_place' => array(
      'variables' => array('text' => NULL, 'icon' => NULL, 'separator' => ' '),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function languageicons_menu() {
  $items['admin/config/regional/language/icons'] = array(
    'title' => 'Language icons',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('languageicons_admin_settings'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer languages'),
    'file' => 'languageicons.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_config_info().
 */
function languageicons_config_info() {
  $prefixes['languageicons.settings'] = array(
    'label' => t('Module name settings'),
    'group' => t('Configuration'),
  );
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * Adds language icons to language switcher block links.
 *
 */
function languageicons_language_switch_links_alter(array &$links, $type, $path) {
  $config = config('languageicons.settings');
  if ($config->get('languageicons_show_block') || $config->get('languageicons_show_node')) {
    foreach (array_keys($links) as $langcode) {
      if (!isset($links[$langcode]['language'])) {
        $lang_obj['language'] = $langcode;
        $links[$langcode]['language'] = (object) $lang_obj;
      }
      languageicons_link_add($links[$langcode]);
    }
  }
}

/**
 * Add language icon to link.
 *
 * The language icon may be a different language as the destination page, can be passed in 'language_icon'.
 */
function languageicons_link_add(&$link, $title = NULL) {
  $language = isset($link['language_icon']) ? $link['language_icon'] : $link['language'];
  $title = $title ? $title : $link['title'];
  $icon = theme('languageicons_icon', array(
    'language' => $language,
    'title' => check_plain($title),
  ));
  if ($icon) {
    $link['title'] = theme('languageicons_place', array(
      'text' => check_plain($link['title']),
      'icon' => $icon,
    ));
    $link['html'] = TRUE;
  }
}

/**
 * Theme language icon.
 *
 * This function can be overridden for no language icons.
 *
 * @see also theme_image()
 */
function theme_languageicons_icon($variables) {
  $config = config('languageicons.settings');
  $language = $variables['language'];
  $title    = $variables['title'];

  if ($path = $config->get('languageicons_path')) {
    $title = $title ? $title : $language->name;
    // Build up $image for theme_image() consumption.
    $image = array(
      'path' => str_replace('*', $language->langcode, check_plain($path)),
      'alt' => $title,
      'title' => $title,
      'attributes' => array(
        'class' => array('language-icon'),
      ),
    );
    if ($size = check_plain($config->get('languageicons_size'))) {
      list($width, $height) = explode('x', $size);
      $image += array(
        'width' => $width,
        'height' => $height,
      );
    }
    return theme('image', $image);
  }
}

/**
 * Theme language icon and text.
 *
 * @ingroup themeable
 */
function theme_languageicons_place($variables) {
  $text = $variables['text'];
  $icon = $variables['icon'];
  $separator = $variables['separator'];

  switch (config_get('languageicons.settings', 'languageicons_placement')) {
    case 'after':
      return $text . $separator . $icon;
    case 'replace':
      return $icon;
    case 'before':
    default:
      return $icon . $separator . $text;
  }
}
